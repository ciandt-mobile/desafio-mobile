apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors
    productFlavors.each {

        productFlavorName ->
            //iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    //sourceName — e.g. freeDebug ,sourcePath — e.g. free/debug
                    def sourceName, sourcePath
                    if (!productFlavorName) {
                        sourceName = sourcePath = "${buildTypeName}"
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                        sourcePath = "${productFlavorName}/${buildTypeName}"
                    }
                    // testTaskName —  e.g. testFreeDebugtest task that the coverage task depends on,
                    def testTaskName = "test${sourceName.capitalize()}UnitTest"
                    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                    task "jacoco${testTaskName.capitalize()}Report" (type:JacocoReport, dependsOn: "$testTaskName") {
                        group = "Reporting"
                        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                        reports {
                            xml.enabled = true
                            html.enabled = true
                        }

                        def javaClasses = []
                        def kotlinClasses = []
                        def javaSrc = []
                        def kotlinSrc = []
                        def execution = []

                        def fileFilter = ['**/R.class',
                                          '**/R$*.class',
                                          '**/BuildConfig.*',
                                          '**/Manifest*.*',
                                          '**/*Test*.*',
                                          'android/**/*.*',
                                          '**/*Activity**',
                                          '**/*Fragment**',
                                          '**/*Binding.*',
                                          '**/*BindingImpl.*',
                                          '**/DataBinderMapperImpl.*',
                                          '**/DataBinderMapperImpl$*.*',
                                          '**/api/model/**',
                                          '**/analytics/Event.*',
                                          '**/components/**',
                                          '**/AndroidLogger.*',
                                          '**/*Constants*',
                                          '**/android/**',
                                          '**/view/**',
                                          '**/adapters/**',
                                          '**/GoFundMeApplication**',
                                          '**/shareSheetDelegateModules**',
                        ]


                        rootProject.subprojects.each { proj ->
                            javaClasses   << fileTree(dir: "$proj.buildDir/intermediates/javac/${sourceName}", excludes: fileFilter)
                            kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/${sourceName}", excludes: fileFilter)
                            javaSrc       << "$proj.projectDir/src/main/java"
                            kotlinSrc     << "$proj.projectDir/src/main/kotlin"
                            execution     << fileTree(dir: proj.buildDir,
                                    includes: ["jacoco/${testTaskName}.exec",
                                               'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
                        }

                        sourceDirectories = files([javaSrc, kotlinSrc])
                        classDirectories = files([javaClasses, kotlinClasses])

                        print execution

                        executionData = files(execution)

                        doLast() {
                            print "file://${reports.html.destination}/index.html"
                        }

                    }
            }
    }
}